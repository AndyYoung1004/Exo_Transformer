@startuml

VideoGraph <|-- TransformerVideoGraph
VideoGraph <|-- PreviewingVideoGraph
TransformerVideoGraph <|.. TransformerMultipleInputVideoGraph
TransformerVideoGraph <|.. TransformerSingleInputVideoGraph
TransformerVideoGraph <|.. VideoGraphWrapper

class CompositingVideoSinkProvider {
videoFrameRenderControl : VideoFrameRenderControl
videoGraph : PreviewingVideoGraph
}

CompositingVideoSinkProvider -[#red]- VideoGraph : 预览0
CompositingVideoSinkProvider *-[#red]-> PreviewingSingleInputVideoGraph : 实际预览0

interface VideoGraph {}

interface TransformerVideoGraph {}

interface PreviewingVideoGraph {}

class TransformerMultipleInputVideoGraph {}
class TransformerSingleInputVideoGraph
class VideoGraphWrapper {}
class PreviewingSingleInputVideoGraph {}

interface SingleInputVideoGraph {
videoFrameProcessor : VideoFrameProcessor
}
class VideoFrameProcessor {
}

SingleInputVideoGraph *-[#red]-> DefaultVideoFrameProcessor : 预览2

PreviewingVideoGraph <|.. PreviewingSingleInputVideoGraph
SingleInputVideoGraph <|-[#red]- PreviewingSingleInputVideoGraph : 预览1


class DefaultVideoFrameProcessor {
glObjectsProvider : GlObjectsProvider
inputSwitcher : InputSwitcher
videoFrameProcessingTaskExecutor : VideoFrameProcessingTaskExecutor
finalShaderProgramWrapper : FinalShaderProgramWrapper
intermediateGlShaderPrograms : List<GlShaderProgram>
}
class FinalShaderProgramWrapper {
defaultShaderProgram : DefaultShaderProgram
outputSurfaceInfo : SurfaceInfo
outputEglSurface : EGLSurface
renderOutputFrame() : void
}
DefaultVideoFrameProcessor *-[#red]-> FinalShaderProgramWrapper : 预览3
FinalShaderProgramWrapper *-[#red]-> DefaultShaderProgram  : 预览4

class InputSwitcher {
glObjectsProvider : GlObjectsProvider
videoFrameProcessingTaskExecutor : VideoFrameProcessingTaskExecutor
activeTextureManager : TextureManager
}
class TextureManager {
videoFrameProcessingTaskExecutor : VideoFrameProcessingTaskExecutor
setSamplingGlShaderProgram() : void
queueInputTexture() : void
queueInputBitmap() : void
getInputSurface() : Surface
registerInputFrame() : void
}
class ExternalTextureManager {
externalShaderProgram : ExternalTextureManager
surface : Surface
surfaceTexture : SurfaceTexture
}

class DefaultShaderProgram {
drawFrame() : void
}

ExternalTextureManager *-[#blue]-> DefaultShaderProgram : 保存4
TextureManager <|-- ExternalTextureManager
InputSwitcher *-[#blue]-> ExternalTextureManager : 保存3
DefaultVideoFrameProcessor *-[#blue]-> InputSwitcher : 保存2
VideoFrameProcessor <|.. DefaultVideoFrameProcessor
VideoFrameProcessingWrapper *-[#blue]-> DefaultVideoFrameProcessor : 保存1

interface SampleConsumer {
}
class GraphInput {
}
SampleConsumer <|-- GraphInput
GraphInput <|-- VideoFrameProcessingWrapper
ExoAssetLoaderBaseRenderer *-[#blue]-> SampleConsumer : 保存0

@enduml

所有的沟通的脐带是 VideoGraph
这个来源是 CompositionPlayer有一个previewingVideoGraphFactory，用于创建PreviewingSingleInputVideoGraph
这里面又有 DefaultVideoFrameProcessor 和 FinalShaderProgramWrapper 和 defaultShaderProgram 用于后处理绘制