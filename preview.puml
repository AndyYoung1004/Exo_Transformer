@startuml

class CompositionPlayer {
players : List<ExoPlayer>
composition : Composition
displaySurface : Surface
videoOutput : Object
}

abstract class SimpleBasePlayer {}

abstract class BasePlayer {}

interface Player {}

Player <|.. BasePlayer
BasePlayer <|-- SimpleBasePlayer
SimpleBasePlayer <|-- CompositionPlayer

interface ExoPlayer {}

class ExoPlayerImpl {
renderers : Renderer[]
internalPlayer : ExoPlayerImplInternal

}
BasePlayer <|-- ExoPlayerImpl
ExoPlayer <|.. ExoPlayerImpl
CompositionPlayer *-[#red]-> ExoPlayerImpl

class ExoPlayerImplInternal {
renderers : Renderer[]

}

ExoPlayerImpl *-[#red]-> ExoPlayerImplInternal

abstract class MediaCodecRenderer {}

class MediaCodecVideoRender {
videoSink : VideoSink
render() : void
}

class SequenceVideoRenderer {

}

MediaCodecRenderer <|-- MediaCodecVideoRender
MediaCodecVideoRender <|-[#red]- SequenceVideoRenderer

ExoPlayerImplInternal *-[#red]-> SequenceVideoRenderer

interface VideoSink {}

class CompositingVideoSinkProvider {
videoFrameRenderControl : VideoFrameRenderControl
videoGraph : PreviewingVideoGraph
}

class VideoFrameRenderControl {
frameRenderer : FrameRenderer
renderFrame() : void
}

interface FrameRenderer {}
class FrameRendererImpl {
CompositingVideoSinkProvider
}
FrameRenderer <|.. FrameRendererImpl

CompositingVideoSinkProvider *-[#red]-> VideoFrameRenderControl
VideoFrameRenderControl *-[#red]-> FrameRendererImpl
FrameRendererImpl *-[#red]-> CompositingVideoSinkProvider

class VideoSinkImpl {
CompositingVideoSinkProvider
render() : void
}
VideoSink <|.. VideoSinkImpl
MediaCodecVideoRender *-[#red]-> VideoSinkImpl
VideoSinkImpl *-[#red]-> CompositingVideoSinkProvider

@enduml

预览的时候，直接用的exoplayer去做的预览，后面接一个特效模块，这个特效模块是复用的，最后送到surface上面去

CompositionPreviewActivity 中看一下解析、解码和render模块


CompositionPlayer 会创建一堆 ExoPlayer
ExoPlayer player = playerBuilder.build(); // 会创建一个 ExoPlayerImpl
setPlayerSequence(player, editedMediaItemSequence, /* shouldGenerateSilence= */ i == 0);
这里面会去 player.setMediaSource(mediaSourceBuilder.build());

因此 CompositionPlayer 创建的 player 其实是 ExoPlayerImpl ，我们看下 ExoPlayerImpl 如何实现预览的 ？
而实际干活的又是 ExoPlayerImplInternal 里面通过doSomeWork 一直在render ，我们看下如何 render


最后走到 VideoGraph 的时候，这个时候就到后处理模块了，这个 VideoGraph 是VideoSink 和后处理模块的脐带
此处应该单独开一个puml专门描述这个 VideoGraph

这个来源是 CompositionPlayer有一个previewingVideoGraphFactory，用于创建PreviewingSingleInputVideoGraph



代码调用流程：
MediaCodecVideoRenderer#render
VideoSinkImpl#render
CompositingVideoSinkProvider#render
VideoFrameRenderControl#render
VideoFrameRenderControl#renderFrame
FrameRendererImpl#renderFrame
PreviewingSingleInputVideoGraph#renderOutputFrame
DefaultFrameProcessor#renderOutputFrame
FinalShaderProgramWrapper#renderOutputFrame
FinalShaderProgramWrapper#renderFrame
FinalShaderProgramWrapper#renderFrameToOutputSurface
DefaultShaderProgram#drawFrame